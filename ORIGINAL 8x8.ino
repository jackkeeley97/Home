#include <FrequencyTimer2.h>
//http://embed.plnkr.co/3VUsekP3jC5xwSIQDVHx/preview

#define ROW_1 2
#define ROW_2 3
#define ROW_3 4
#define ROW_4 5
#define ROW_5 6
#define ROW_6 7
#define ROW_7 8
#define ROW_8 9

#define COL_1 10
#define COL_2 11
#define COL_3 12
#define COL_4 13
#define COL_5 A0
#define COL_6 A1
#define COL_7 A2
#define COL_8 A3

const byte rows[] = {
    ROW_1, ROW_2, ROW_3, ROW_4, ROW_5, ROW_6, ROW_7, ROW_8
};

// The display buffer
byte OFF[] = {B00000000,B11011011,B01010010,B01011011,B01010010,B01010010,B11010010,B00000000};
byte ON[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B00000000,B00000000,B00000000};
byte ONA[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B00000000,B11111111};
byte ONB[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B10000000,B11111111};
byte ONC[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11000000,B11111111};
byte OND[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11100000,B11111111};
byte ONE[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11110000,B11111111};
byte ONF[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11111000,B11111111};
byte ONG[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11111100,B11111111};
byte ONH[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11111110,B11111111};
byte ONI[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B11111111,B11111111,B11111111};
byte ONJ[] = {B11101001,B10101101,B10101011,B11101001,B00000000,B00000100,B00101000,B00010000};

byte CIRCLE1[] = {B10000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000001};
byte CIRCLE2[] = {B11000001,B00000001,B00000000,B00000000,B00000000,B00000000,B10000000,B10000011};
byte CIRCLE3[] = {B11100001,B00000001,B00000001,B00000000,B00000000,B10000000,B10000000,B10000111};
byte CIRCLE4[] = {B11110001,B00000001,B00000001,B00000001,B10000000,B10000000,B10000000,B10001111};
byte CIRCLE5[] = {B11111001,B00000001,B00000001,B10000001,B10000001,B10000000,B10000000,B10011111};
byte CIRCLE6[] = {B11111101,B00000001,B10000001,B10000001,B10000001,B10000001,B10000000,B10111111};
byte CIRCLE7[] = {B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111};

byte CIRCLE8[] = {B01111110,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B01111110};
byte CIRCLE9[] = {B00111110,B10000000,B10000001,B10000001,B10000001,B10000001,B00000001,B01111100};
byte CIRCLE10[] = {B00011110,B10000000,B10000000,B10000001,B10000001,B00000001,B00000001,B01111000};
byte CIRCLE11[] = {B00001110,B10000000,B10000000,B10000000,B00000001,B00000001,B00000001,B01110000};
byte CIRCLE12[] = {B00000110,B10000000,B10000000,B00000000,B00000000,B00000001,B00000001,B01100000};
byte CIRCLE13[] = {B00000010,B10000000,B00000000,B00000000,B00000000,B00000000,B00000001,B01000000};

byte SCIRCLE1[] = {B00000000,B01000010,B00000000,B00000000,B00000000,B00000000,B01000010,B00000000};
byte SCIRCLE2[] = {B00000000,B01100010,B00000010,B00000000,B00000000,B01000000,B01000110,B00000000};
byte SCIRCLE3[] = {B00000000,B01110010,B00000010,B00000010,B01000000,B01000000,B01001110,B00000000};
byte SCIRCLE4[] = {B00000000,B01111010,B00000010,B01000010,B01000010,B01000000,B01011110,B00000000};
byte SCIRCLE5[] = {B00000000,B01111110,B01000010,B01000010,B01000010,B01000010,B01111110,B00000000};

byte SCIRCLE6[] = {B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B00111100,B00000000};
byte SCIRCLE7[] = {B00000000,B00011100,B01000000,B01000010,B01000010,B00000010,B00111000,B00000000};
byte SCIRCLE8[] = {B00000000,B00001100,B01000000,B01000000,B00000010,B00000010,B00110000,B00000000};
byte SCIRCLE9[] = {B00000000,B00000100,B01000000,B00000000,B00000000,B00000010,B00100000,B00000000};

byte SCIRCLE10[] = {B00000000,B00000100,B01001000,B00100000,B00000100,B00010010,B00100000,B00000000};
byte SCIRCLE11[] = {B00000010,B10000100,B01001000,B00100000,B00000100,B00010010,B00100001,B01000000};
byte SCIRCLE12[] = {B00000100,B00001000,B10010000,B01000100,B00100010,B00001001,B00010000,B00100000};
byte SCIRCLE13[] = {B00001000,B00010000,B00100100,B10000010,B01000001,B00100100,B00001000,B00010000};
byte SCIRCLE14[] = {B00010000,B00100100,B01000010,B00000001,B10000000,B01000010,B00100100,B00001000};
byte SCIRCLE15[] = {B00100100,B01000010,B10000001,B00000000,B00000000,B10000001,B01000010,B00100100};
byte SCIRCLE16[] = {B01000010,B10000001,B00000000,B00000000,B00000000,B00000000,B10000001,B01000010};
byte SCIRCLE17[] = {B10000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000001};


byte SPEAKERONF[] = {B00001000,B00000100,B01010010,B11001010,B11001010,B01010010,B00000100,B00001000};
byte SPEAKERONH[] = {B00000000,B00000000,B01010000,B11001000,B11001000,B01010000,B00000000,B00000000};
byte SPEAKEROFF[] = {B00000000,B00000000,B01000000,B11000000,B11000000,B01000000,B00000000,B00000000};

byte DTWO[] = {B00000000,B11001100,B10100010,B10010010,B10010010,B10100100,B11001111,B00000000};

byte GUNOFF[] = {B00000000,B10010000,B11111000,B11111100,B11111000,B01000000,B01000000,B01000000};
byte GUNON[] = {B00000000,B10010000,B11111000,B11111101,B11111000,B01000000,B01000000,B01000000};

byte LILHEART[] = {B00000000,B00000000,B01100110,B01111110,B01111110,B00111100,B00011000,B00000000};
byte BIGHEART[] = {B00000000,B11100111,B11111111,B11111111,B11111111,B01111110,B00111100,B00011000};

byte EX[] = {B00000000,B00010000,B00010000,B00010000,B00010000,B00000000,B00010000,B00000000};
byte A[] = {B00000000,B00011000,B00100100,B00100100,B00111100,B00100100,B00100100,B00000000};
byte B[] = {B01111000,B01001000,B01001000,B01110000,B01001000,B01000100,B01000100,B01111100};
byte C[] = {B00000000,B00011110,B00100000,B01000000,B01000000,B01000000,B00100000,B00011110};
byte D[] = {B00000000,B00111000,B00100100,B00100010,B00100010,B00100100,B00111000,B00000000};
byte E[] = {B00000000,B00111100,B00100000,B00111000,B00100000,B00100000,B00111100,B00000000};
byte F[] = {B00000000,B00111100,B00100000,B00111000,B00100000,B00100000,B00100000,B00000000};
byte G[] = {B00000000,B00111110,B00100000,B00100000,B00101110,B00100010,B00111110,B00000000};
byte H[] = {B00000000,B00100100,B00100100,B00111100,B00100100,B00100100,B00100100,B00000000};
byte I[] = {B00000000,B00111000,B00010000,B00010000,B00010000,B00010000,B00111000,B00000000};
byte J[] = {B00000000,B00011100,B00001000,B00001000,B00001000,B00101000,B00111000,B00000000};
byte K[] = {B00000000,B00100100,B00101000,B00110000,B00101000,B00100100,B00100100,B00000000};
byte L[] = {B00000000,B00100000,B00100000,B00100000,B00100000,B00100000,B00111100,B00000000};
byte M[] = {B00000000,B00000000,B01000100,B10101010,B10010010,B10000010,B10000010,B00000000};
byte N[] = {B00000000,B00100010,B00110010,B00101010,B00100110,B00100010,B00000000,B00000000};
byte O[] = {B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B00111100,B00000000};
byte P[] = {B00000000,B00111000,B00100100,B00100100,B00111000,B00100000,B00100000,B00000000};
byte Q[] = {B00000000,B00111100,B01000010,B01000010,B01000010,B01000110,B00111110,B00000001};
byte R[] = {B00000000,B00111000,B00100100,B00100100,B00111000,B00100100,B00100100,B00000000};
byte S[] = {B00000000,B00111100,B00100000,B00111100,B00000100,B00000100,B00111100,B00000000};
byte T[] = {B00000000,B01111100,B00010000,B00010000,B00010000,B00010000,B00010000,B00000000};
byte U[] = {B00000000,B01000010,B01000010,B01000010,B01000010,B00100100,B00011000,B00000000};
byte V[] = {B00000000,B00100010,B00100010,B00100010,B00010100,B00010100,B00001000,B00000000};
byte W[] = {B00000000,B10000010,B10010010,B01010100,B01010100,B00101000,B00000000,B00000000};
byte X[] = {B00000000,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010,B00000000};
byte Y[] = {B00000000,B01000100,B00101000,B00010000,B00010000,B00010000,B00010000,B00000000};
byte Z[] = {B00000000,B00111100,B00000100,B00001000,B00010000,B00100000,B00111100,B00000000};

byte BLANK[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};

byte SMILE[] = {B00000000,B01100110,B01100110,B00000000,B01111110,B01111110,B00111100,B00000000};
byte WINK[] = {B00000000,B01100000,B01100110,B00000000,B00000110,B01111110,B00111100,B00000000};

byte C1[] = {B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte C2[] = {B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000};
byte C3[] = {B00100000,B00100000,B00100000,B00100000,B00100000,B00100000,B00100000,B00100000};
byte C4[] = {B00010000,B00010000,B00010000,B00010000,B00010000,B00010000,B00010000,B00010000};
byte C5[] = {B00001000,B00001000,B00001000,B00001000,B00001000,B00001000,B00001000,B00001000};
byte C6[] = {B00000100,B00000100,B00000100,B00000100,B00000100,B00000100,B00000100,B00000100};
byte C7[] = {B00000010,B00000010,B00000010,B00000010,B00000010,B00000010,B00000010,B00000010};
byte C8[] = {B00000001,B00000001,B00000001,B00000001,B00000001,B00000001,B00000001,B00000001};

byte R1[] = {B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
byte R2[] = {B00000000,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
byte R3[] = {B00000000,B00000000,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000};
byte R4[] = {B00000000,B00000000,B00000000,B11111111,B00000000,B00000000,B00000000,B00000000};
byte R5[] = {B00000000,B00000000,B00000000,B00000000,B11111111,B00000000,B00000000,B00000000};
byte R6[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B11111111,B00000000,B00000000};
byte R7[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11111111,B00000000};
byte R8[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11111111};

byte DRL[] = {B00000001,B00000010,B00000100,B00001000,B00010000,B00100000,B01000000,B10000000};
byte DLR[] = {B10000000,B01000000,B00100000,B00010000,B00001000,B00000100,B00000010,B00000001};

byte SQ1[] = {B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111};
byte SQ2[] = {B01000010,B11111111,B01000010,B01000010,B01000010,B01000010,B11111111,B01000010};
byte SQ3[] = {B00100100,B00100100,B11111111,B00100100,B00100100,B11111111,B00100100,B00100100};
byte SQ4[] = {B00011000,B00011000,B00011000,B11111111,B11111111,B00011000,B00011000,B00011000};

byte CN1[] = {B10000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000001};
byte CN2[] = {B11000011,B11000011,B00000000,B00000000,B00000000,B00000000,B11000011,B11000011};
byte CN3[] = {B11000011,B11100111,B01100110,B00000000,B00000000,B01100110,B11100111,B11000011};
byte CN4[] = {B11000011,B11100111,B01111110,B00111100,B00111100,B01111110,B11100111,B11000011};
byte CN5[] = {B00000000,B01100110,B01111110,B00111100,B00111100,B01111110,B01100110,B00000000};
byte CN6[] = {B00000000,B00000000,B00111100,B00111100,B00111100,B00111100,B00000000,B00000000};
byte CN7[] = {B00000000,B00000000,B00100100,B00011000,B00011000,B00100100,B00000000,B00000000};
byte CN8[] = {B00000000,B00000000,B00000000,B00011000,B00011000,B00000000,B00000000,B00000000};

byte STEPS1[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11000000,B11000000};
byte STEPS2[] = {B00000000,B00000000,B00000000,B00000000,B00110000,B00110000,B00000000,B00000000};
byte STEPS3[] = {B00000000,B00000000,B00000000,B00000000,B00001100,B00001100,B00000000,B00000000};
byte STEPS4[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B00000011};
byte STEPS5[] = {B00000000,B00000000,B00000000,B00000000,B00000011,B00000011,B00000000,B00000000};
byte STEPS6[] = {B00000000,B00000000,B00001100,B00001100,B00000000,B00000000,B00000000,B00000000};
byte STEPS7[] = {B00000000,B00000000,B00000000,B00000000,B00110000,B00110000,B00000000,B00000000};
byte STEPS8[] = {B00000000,B00000000,B00110000,B00110000,B00000000,B00000000,B00000000,B00000000};
byte STEPS9[] = {B00110000,B00110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
byte STEPS10[] = {B11000000,B11000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
byte STEPS11[] = {B00000000,B00000000,B11000000,B11000000,B00000000,B00000000,B00000000,B00000000};

byte SOUND1[] = {B00000010,B00101010,B01101110,B11111111,B11111111,B01111111,B01101110,B00100100};
byte SOUND2[] = {B00010000,B00010000,B01010100,B01111110,B11111111,B01010110,B01010100,B00010000};
byte SOUND3[] = {B00000000,B00001000,B00101010,B01111110,B11111111,B01011010,B00001000,B00000000};
byte SOUNDOFF[] = {B00000000,B00000000,B00000000,B00000000,B11111111,B00000000,B00000000,B00000000};

byte EVERYOTHER1[] = {B10101010,B10101010,B10101010,B10101010,B10101010,B10101010,B10101010,B10101010};
byte EVERYOTHER2[] = {B01010101,B01010101,B01010101,B01010101,B01010101,B01010101,B01010101,B01010101};
byte EVERYOTHER3[] = {B11111111,B00000000,B11111111,B00000000,B11111111,B00000000,B11111111,B00000000};
byte EVERYOTHER4[] = {B00000000,B11111111,B00000000,B11111111,B00000000,B11111111,B00000000,B11111111};

byte FULLSCREEN1[] = {B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000};
byte FULLSCREEN2[] = {B00000011,B00000001,B00000000,B00000000,B00000000,B00000000,B10000000,B11000000};
byte FULLSCREEN3[] = {B00000111,B00000011,B00000001,B00000000,B00000000,B10000000,B11000000,B11100000};
byte FULLSCREEN4[] = {B00001111,B00000111,B00000011,B00000001,B10000000,B11000000,B11100000,B11110000};
byte FULLSCREEN5[] = {B00011111,B00001111,B00000111,B10000011,B11000001,B11100000,B11110000,B11111000};
byte FULLSCREEN6[] = {B00111111,B00011111,B10001111,B11000111,B11100011,B11110001,B11111000,B11111100};
byte FULLSCREEN7[] = {B01111111,B10111111,B11011111,B11101111,B11110111,B11111011,B11111101,B11111110};
byte FULLSCREEN8[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111};

byte SCATTER1[] = {B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111};
byte SCATTER2[] = {B11111111,B10000001,B10000001,B10000001,B10000001,B10100001,B10000001,B11111111};
byte SCATTER3[] = {B11111111,B10000101,B10000001,B10000001,B10000001,B10100001,B10000001,B11111111};
byte SCATTER4[] = {B11111111,B10000101,B10000001,B10001001,B10000001,B10100001,B10000001,B11111111};
byte SCATTER5[] = {B11111111,B11000101,B10000001,B10001001,B10000001,B10100001,B10000001,B11111111};
byte SCATTER6[] = {B11111111,B11000101,B10000001,B10001001,B10000001,B10100101,B10000001,B11111111};
byte SCATTER7[] = {B11111111,B11000101,B10000011,B10001001,B10000001,B10100101,B10000001,B11111111};
byte SCATTER8[] = {B11111111,B11000101,B10000011,B11001001,B10000001,B10100101,B10000001,B11111111};
byte SCATTER9[] = {B11111111,B11000101,B10010011,B11001001,B10000001,B10100101,B10000001,B11111111};
byte SCATTER10[] = {B11111111,B11000101,B10010011,B11001001,B10000001,B10100101,B10010001,B11111111};
byte SCATTER11[] = {B11111111,B11000101,B10010011,B11001001,B10000001,B10100101,B11010001,B11111111};
byte SCATTER12[] = {B11111111,B11000101,B10010011,B11001011,B10000001,B10100101,B11010001,B11111111};
byte SCATTER13[] = {B11111111,B11000111,B10010011,B11001011,B10000001,B10100101,B11010001,B11111111};
byte SCATTER14[] = {B11111111,B11010111,B10010011,B11001011,B10000001,B10100101,B11010001,B11111111};
byte SCATTER15[] = {B11111111,B11010111,B10010011,B11001011,B10010001,B10100101,B11010001,B11111111};
byte SCATTER16[] = {B11111111,B11010111,B10110011,B11001011,B10010001,B10100101,B11010001,B11111111};
byte SCATTER17[] = {B11111111,B11010111,B10110011,B11001011,B10010001,B10100101,B11010011,B11111111};
byte SCATTER18[] = {B11111111,B11110111,B10110011,B11001011,B10010001,B10100101,B11010011,B11111111};
byte SCATTER19[] = {B11111111,B11110111,B10110011,B11001011,B10011001,B10100101,B11010011,B11111111};
byte SCATTER20[] = {B11111111,B11110111,B10110011,B11001011,B10011011,B10100101,B11010011,B11111111};
byte SCATTER21[] = {B11111111,B11110111,B10110011,B11001011,B10011011,B10100101,B11011011,B11111111};
byte SCATTER22[] = {B11111111,B11111111,B10110011,B11001011,B10011011,B10100101,B11011011,B11111111};
byte SCATTER23[] = {B11111111,B11111111,B10110011,B11001111,B10011011,B10100101,B11011011,B11111111};
byte SCATTER24[] = {B11111111,B11111111,B11110011,B11001111,B10011011,B10100101,B11011011,B11111111};
byte SCATTER25[] = {B11111111,B11111111,B11110011,B11001111,B10011011,B11100101,B11011011,B11111111};
byte SCATTER26[] = {B11111111,B11111111,B11110011,B11001111,B10011011,B11100101,B11011111,B11111111};
byte SCATTER27[] = {B11111111,B11111111,B11110011,B11001111,B10011011,B11100101,B11111111,B11111111};
byte SCATTER28[] = {B11111111,B11111111,B11111011,B11001111,B10011011,B11100101,B11111111,B11111111};
byte SCATTER29[] = {B11111111,B11111111,B11111011,B11001111,B11011011,B11100101,B11111111,B11111111};
byte SCATTER30[] = {B11111111,B11111111,B11111011,B11001111,B11011011,B11101101,B11111111,B11111111};
byte SCATTER31[] = {B11111111,B11111111,B11111011,B11001111,B11011011,B11101111,B11111111,B11111111};
byte SCATTER32[] = {B11111111,B11111111,B11111111,B11001111,B11011011,B11101111,B11111111,B11111111};
byte SCATTER33[] = {B11111111,B11111111,B11111111,B11001111,B11011111,B11101111,B11111111,B11111111};
byte SCATTER34[] = {B11111111,B11111111,B11111111,B11011111,B11011111,B11101111,B11111111,B11111111};
byte SCATTER35[] = {B11111111,B11111111,B11111111,B11011111,B11011111,B11111111,B11111111,B11111111};
byte SCATTER36[] = {B11111111,B11111111,B11111111,B11111111,B11011111,B11111111,B11111111,B11111111};
byte SCATTER37[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111};


byte FILL1[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000};
byte FILL2[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B10000000};
byte FILL3[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B10000000,B10000000};
byte FILL4[] = {B00000000,B00000000,B00000000,B00000000,B10000000,B10000000,B10000000,B10000000};
byte FILL5[] = {B00000000,B00000000,B00000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte FILL6[] = {B00000000,B00000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte FILL7[] = {B00000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte FILL8[] = {B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};

byte FILL9[] = {B11000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte FILL10[] = {B11000000,B11000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte FILL11[] = {B11000000,B11000000,B11000000,B10000000,B10000000,B10000000,B10000000,B10000000};
byte FILL12[] = {B11000000,B11000000,B11000000,B11000000,B10000000,B10000000,B10000000,B10000000};
byte FILL13[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B10000000,B10000000,B10000000};
byte FILL14[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B10000000,B10000000};
byte FILL15[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B10000000};
byte FILL16[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B11000000};

byte FILL17[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B11100000};
byte FILL18[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B11000000,B11100000,B11100000};
byte FILL19[] = {B11000000,B11000000,B11000000,B11000000,B11000000,B11100000,B11100000,B11100000};
byte FILL20[] = {B11000000,B11000000,B11000000,B11000000,B11100000,B11100000,B11100000,B11100000};
byte FILL21[] = {B11000000,B11000000,B11000000,B11100000,B11100000,B11100000,B11100000,B11100000};
byte FILL22[] = {B11000000,B11000000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000};
byte FILL23[] = {B11000000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000};
byte FILL24[] = {B11100000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000};

byte FILL25[] = {B11110000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000};
byte FILL26[] = {B11110000,B11110000,B11100000,B11100000,B11100000,B11100000,B11100000,B11100000};
byte FILL27[] = {B11110000,B11110000,B11110000,B11100000,B11100000,B11100000,B11100000,B11100000};
byte FILL28[] = {B11110000,B11110000,B11110000,B11110000,B11100000,B11100000,B11100000,B11100000};
byte FILL29[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11100000,B11100000,B11100000};
byte FILL30[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11100000,B11100000};
byte FILL31[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11100000};
byte FILL32[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11110000};


byte FILL33[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11111000};
byte FILL34[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11110000,B11111000,B11111000};
byte FILL35[] = {B11110000,B11110000,B11110000,B11110000,B11110000,B11111000,B11111000,B11111000};
byte FILL36[] = {B11110000,B11110000,B11110000,B11110000,B11111000,B11111000,B11111000,B11111000};
byte FILL37[] = {B11110000,B11110000,B11110000,B11111000,B11111000,B11111000,B11111000,B11111000};
byte FILL38[] = {B11110000,B11110000,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000};
byte FILL39[] = {B11110000,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000};
byte FILL40[] = {B11111000,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000};

byte FILL41[] = {B11111100,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000};
byte FILL42[] = {B11111100,B11111100,B11111000,B11111000,B11111000,B11111000,B11111000,B11111000};
byte FILL43[] = {B11111100,B11111100,B11111100,B11111000,B11111000,B11111000,B11111000,B11111000};
byte FILL44[] = {B11111100,B11111100,B11111100,B11111100,B11111000,B11111000,B11111000,B11111000};
byte FILL45[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111000,B11111000,B11111000};
byte FILL46[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111000,B11111000};
byte FILL47[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111000};
byte FILL48[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111100};

byte FILL49[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111110};
byte FILL50[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111100,B11111110,B11111110};
byte FILL51[] = {B11111100,B11111100,B11111100,B11111100,B11111100,B11111110,B11111110,B11111110};
byte FILL52[] = {B11111100,B11111100,B11111100,B11111100,B11111110,B11111110,B11111110,B11111110};
byte FILL53[] = {B11111100,B11111100,B11111100,B11111110,B11111110,B11111110,B11111110,B11111110};
byte FILL54[] = {B11111100,B11111100,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110};
byte FILL55[] = {B11111100,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110};
byte FILL56[] = {B11111110,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110};

byte FILL57[] = {B11111111,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110};
byte FILL58[] = {B11111111,B11111111,B11111110,B11111110,B11111110,B11111110,B11111110,B11111110};
byte FILL59[] = {B11111111,B11111111,B11111111,B11111110,B11111110,B11111110,B11111110,B11111110};
byte FILL60[] = {B11111111,B11111111,B11111111,B11111111,B11111110,B11111110,B11111110,B11111110};
byte FILL61[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111110,B11111110,B11111110};
byte FILL62[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111110,B11111110};
byte FILL63[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111110};
byte FILL64[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111};

float timeCount = 0;

void setup() {
    // Open serial port
    Serial.begin(9600);
    
    // Set all used pins to OUTPUT
    // This is very important! If the pins are set to input
    // the display will be very dim.
    for (byte i = 2; i <= 13; i++)
        pinMode(i, OUTPUT);
    pinMode(A0, OUTPUT);
    pinMode(A1, OUTPUT);
    pinMode(A2, OUTPUT);
    pinMode(A3, OUTPUT);
}

void loop() {
  // This could be rewritten to not use a delay, which would make it appear brighter
delay(1);
timeCount += 1;
                                                        // Juggernaut Title (WE WILL ROCK YOU)
if(timeCount <  1) {
drawScreen(J);
} else if (timeCount <  25) {
// do nothing
} else if (timeCount <  55) {
drawScreen(J);
} else if (timeCount <  1) {
// nothing
} else if (timeCount <  95) {
drawScreen(U);
} else if (timeCount <  1) {
// nothing
} else if (timeCount <  140) {
drawScreen(G);
} else if (timeCount <  1) {
// nothing
} else if (timeCount <  180) {
drawScreen(BLANK);
} else if (timeCount <  1) {
// nothing
} else if (timeCount <  200) {
drawScreen(G);
} else if (timeCount <  1) {
 // nothing
} else if (timeCount <  235) {
 drawScreen(E);
} else if (timeCount <  1) {
// do nothing
} else if (timeCount <  270) {
drawScreen(R);
} else if (timeCount <  1) {
// nothing
} else if (timeCount <  300) {
drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  350) {
drawScreen(N);
} else if (timeCount <  1) {

} else if (timeCount <  385) {
drawScreen(A);
} else if (timeCount <  1) {

} else if (timeCount <  420) {
drawScreen(U);
} else if (timeCount <  1) {

} else if (timeCount <  460) {
drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  480) {
drawScreen(T);
} else if (timeCount <  1) {
                                                    // D2 group title (WE WILL ROCK YOU)
} else if (timeCount <  520) {
drawScreen(DTWO);
} else if (timeCount <  1) {
  
} else if (timeCount <  560) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  600) {
drawScreen(DTWO);
} else if (timeCount <  1) {
  
} else if (timeCount <  640) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  680) {
drawScreen(DTWO);
} else if (timeCount <  1) {
  
} else if (timeCount <  720) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  900) {
drawScreen(DTWO);
} else if (timeCount <  1) {

                                        // Smile (WE WILL ROCK YOU)
} else if (timeCount <  950) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1050) {
drawScreen(SMILE);
} else if (timeCount <  1) {

} else if (timeCount <  1100) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1150) {
drawScreen(SMILE);
} else if (timeCount <  1) {

} else if (timeCount <  1200) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1250) {
drawScreen(SMILE);
} else if (timeCount <  1) {

} else if (timeCount <  1300) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1350) {
drawScreen(SMILE);
} else if (timeCount <  1) {

} else if (timeCount <  1400) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1450) {
drawScreen(SMILE);
} else if (timeCount <  1) {

} else if (timeCount <  1550) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1600) {
drawScreen(SMILE);
} else if (timeCount <  1) {

} else if (timeCount <  1650) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                        // wink instead of smile
} else if (timeCount <  1700) {
drawScreen(WINK);
} else if (timeCount <  1) {

} else if (timeCount <  1750) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1800) {
drawScreen(WINK);
} else if (timeCount <  1) {

} else if (timeCount <  1850) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  1900) {
drawScreen(WINK);
} else if (timeCount <  1) {
                                              // Square cross over pattern (WE WILL ROCK YOU)
                                              // 1
} else if (timeCount <  1950) {
  drawScreen(SQ1);
} else if (timeCount <  1) {

} else if (timeCount <  2000) {
drawScreen(SQ2);
} else if (timeCount <  1) {

} else if (timeCount <  2050) {
  drawScreen(SQ3);
} else if (timeCount <  1) {

} else if (timeCount <  2100) {
drawScreen(SQ4);
} else if (timeCount <  1) {
                                            // 2
} else if (timeCount <  2150) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  2200) {
drawScreen(SQ4);
} else if (timeCount <  1) {

} else if (timeCount <  2250) {
  drawScreen(SQ3);
} else if (timeCount <  1) {

} else if (timeCount <  2300) {
drawScreen(SQ2);
} else if (timeCount <  1) {

} else if (timeCount <  2350) {
drawScreen(SQ1);
} else if (timeCount <  1) {

} else if (timeCount <  2400) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                            // 3
} else if (timeCount <  2450) {
  drawScreen(SQ1);
} else if (timeCount <  1) {

} else if (timeCount <  2500) {
drawScreen(SQ2);
} else if (timeCount <  1) {

} else if (timeCount <  2550) {
  drawScreen(SQ3);
} else if (timeCount <  1) {

} else if (timeCount <  2600) {
drawScreen(SQ4);
} else if (timeCount <  1) {
 
} else if (timeCount <  2650) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                        // 4 Fade towards different patterns (WE WILL ROCK YOU / MY LOVE)
} else if (timeCount <  2700) {
drawScreen(SQ4);
} else if (timeCount <  1) {

} else if (timeCount <  2750) {
  drawScreen(SQ3);
} else if (timeCount <  1) {

} else if (timeCount <  2800) {
drawScreen(SQ2);
} else if (timeCount <  1) {

} else if (timeCount <  2850) {
drawScreen(SQ1);
} else if (timeCount <  1) {

} else if (timeCount <  2900) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                  
                                        // Sound bars patterns for fast tempo (MY LOVE)

} else if (timeCount <  2950) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3000) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3050) {
drawScreen(SOUND3);
} else if (timeCount <  1) {


} else if (timeCount <  3100) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3150) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3200) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  3250) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3300) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3350) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  3400) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3450) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3500) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  3550) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3600) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3650) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  3700) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3750) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3800) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  3850) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  3900) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  3950) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  4000) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  4150) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  4200) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  4250) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  4300) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  4350) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  4400) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  4450) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  4500) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  4550) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  4600) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  4650) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  4700) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  4750) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  4800) {
drawScreen(SOUND3);
} else if (timeCount <  1) {



} else if (timeCount <  4850) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  4900) {
drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  4950) {
drawScreen(SOUND3);
} else if (timeCount <  1) {

} else if (timeCount <  5000) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {

} else if (timeCount <  5050) {
  drawScreen(SOUND2);
} else if (timeCount <  1) {

} else if (timeCount <  5100) {
  drawScreen(SOUND3);
} else if (timeCount <  1) {

} else if (timeCount <  5150) {
  drawScreen(SOUND1);
} else if (timeCount <  1) {
                                      // Music cuts out so sound bars MUTE
} else if (timeCount <  5200) {
  drawScreen(SOUNDOFF);
} else if (timeCount <  1) {

} else if (timeCount <  5250) {
  drawScreen(SOUNDOFF);
} else if (timeCount <  1) {

} else if (timeCount <  5300) {
  drawScreen(SOUNDOFF);
} else if (timeCount <  1) {

} else if (timeCount <  5350) {
  drawScreen(SOUNDOFF);
} else if (timeCount <  1) {

} else if (timeCount <  5400) {
  drawScreen(SOUNDOFF);
} else if (timeCount <  1) {
                                      // OFF -> ON loading bars (ROBOT SOUND)
} else if (timeCount <  5450) {
  drawScreen(OFF);
} else if (timeCount <  1) {

} else if (timeCount <  5500) {
  drawScreen(ON);
} else if (timeCount <  1) {

} else if (timeCount <  5600) {
  drawScreen(ONA);
} else if (timeCount <  1) {

} else if (timeCount <  5650) {
  drawScreen(ONB);
} else if (timeCount <  1) {

} else if (timeCount <  5700) {
  drawScreen(ONC);
} else if (timeCount <  1) {

} else if (timeCount <  5750) {
  drawScreen(OND);
} else if (timeCount <  1) {

} else if (timeCount <  5800) {
  drawScreen(ONE);
} else if (timeCount <  1) {

} else if (timeCount <  5850) {
  drawScreen(ONF);
} else if (timeCount <  1) {

} else if (timeCount <  5900) {
  drawScreen(ONG);
} else if (timeCount <  1) {

} else if (timeCount <  5950) {
  drawScreen(ONH);
} else if (timeCount <  1) {

} else if (timeCount <  6000) {
  drawScreen(ONI);
} else if (timeCount <  1) {
                                          // Loading on tick
} else if (timeCount <  6050) {
  drawScreen(ONJ);
} else if (timeCount <  1) {

                                        // Car starting up (FAIL)
} else if (timeCount <  6100) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  6150) {
  drawScreen(DLR);
} else if (timeCount <  1) {

} else if (timeCount <  6200) {
  drawScreen(DRL);
} else if (timeCount <  1) {

} else if (timeCount <  6250) {
  drawScreen(DLR);
} else if (timeCount <  1) {

} else if (timeCount <  6300) {
  drawScreen(DRL);
} else if (timeCount <  1) {
                                      // Corners (NUMB)

} else if (timeCount <  6650) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

  

} else if (timeCount <  6700) {
  drawScreen(CN1);
} else if (timeCount <  1) {

} else if (timeCount <  6750) {
  drawScreen(CN2);
} else if (timeCount <  1) {

} else if (timeCount <  6800) {
  drawScreen(CN3);
} else if (timeCount <  1) {

} else if (timeCount <  6850) {
  drawScreen(CN4);
} else if (timeCount <  1) {

} else if (timeCount <  6900) {
  drawScreen(CN5);
} else if (timeCount <  1) {

} else if (timeCount <  6950) {
  drawScreen(CN6);
} else if (timeCount <  1) {

} else if (timeCount <  7000) {
  drawScreen(CN7);
} else if (timeCount <  1) {

} else if (timeCount <  7050) {
  drawScreen(CN8);
} else if (timeCount <  1) {


} else if (timeCount <  7100) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                        // Corner gap the rerun opposite direction

} else if (timeCount <  7150) {
  drawScreen(CN8);
} else if (timeCount <  1) {

} else if (timeCount <  7200) {
  drawScreen(CN7);
} else if (timeCount <  1) {

} else if (timeCount <  7250) {
  drawScreen(CN6);
} else if (timeCount <  1) {

} else if (timeCount <  7300) {
  drawScreen(CN5);
} else if (timeCount <  1) {

} else if (timeCount <  7350) {
  drawScreen(CN4);
} else if (timeCount <  1) {

} else if (timeCount <  7400) {
  drawScreen(CN3);
} else if (timeCount <  1) {

} else if (timeCount <  7450) {
  drawScreen(CN2);
} else if (timeCount <  1) {

} else if (timeCount <  7500) {
  drawScreen(CN1);
} else if (timeCount <  1) {
      
                                      //circle spinning  (NUMB)
} else if (timeCount <  7550) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

 
} else if (timeCount <  7600) {
  drawScreen(CIRCLE1);
} else if (timeCount <  1) {

} else if (timeCount <  7650) {
  drawScreen(CIRCLE2);
} else if (timeCount <  1) {

} else if (timeCount <  7700) {
  drawScreen(CIRCLE3);
} else if (timeCount <  1) {

} else if (timeCount <  7750) {
  drawScreen(CIRCLE4);
} else if (timeCount <  1) {

} else if (timeCount <  7800) {
  drawScreen(CIRCLE5);
} else if (timeCount <  1) {

} else if (timeCount <  7850) {
  drawScreen(CIRCLE6);
} else if (timeCount <  1) {

} else if (timeCount <  7900) {
  drawScreen(CIRCLE7);
} else if (timeCount <  1) {

} else if (timeCount <  7950) {
  drawScreen(CIRCLE8);
} else if (timeCount <  1) {

} else if (timeCount <  8000) {
  drawScreen(CIRCLE9);
} else if (timeCount <  1) {

} else if (timeCount <  8050) {
  drawScreen(CIRCLE10);
} else if (timeCount <  1) {

} else if (timeCount <  8100) {
  drawScreen(CIRCLE11);
} else if (timeCount <  1) {

} else if (timeCount <  8150) {
  drawScreen(CIRCLE12);
} else if (timeCount <  1) {

} else if (timeCount <  8200) {
  drawScreen(CIRCLE13);
} else if (timeCount <  1) {

} else if (timeCount <  8250) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                  // End of circle transition to everyother

} else if (timeCount <  8300) {
  drawScreen(EVERYOTHER1);
} else if (timeCount <  1) {

} else if (timeCount <  8350) {
  drawScreen(EVERYOTHER2);
} else if (timeCount <  1) {

} else if (timeCount <  8400) {
  drawScreen(EVERYOTHER3);
} else if (timeCount <  1) {

} else if (timeCount <  8450) {
  drawScreen(EVERYOTHER4);
} else if (timeCount <  1) {

} else if (timeCount <  8500) {
  drawScreen(EVERYOTHER1);
} else if (timeCount <  1) {

} else if (timeCount <  8550) {
  drawScreen(EVERYOTHER2);
} else if (timeCount <  1) {

} else if (timeCount <  8600) {
  drawScreen(EVERYOTHER3);
} else if (timeCount <  1) {

} else if (timeCount <  8650) {
  drawScreen(EVERYOTHER4);
} else if (timeCount <  1) {
                                          // EVERYOTHER ROTATE

} else if (timeCount <  8700) {
  drawScreen(EVERYOTHER1);
} else if (timeCount <  1) {

} else if (timeCount <  8750) {
  drawScreen(EVERYOTHER3);
} else if (timeCount <  1) {

} else if (timeCount <  8800) {
  drawScreen(EVERYOTHER2);
} else if (timeCount <  1) {

} else if (timeCount <  8850) {
  drawScreen(EVERYOTHER4);
} else if (timeCount <  1) {

} else if (timeCount <  8900) {
  drawScreen(EVERYOTHER1);
} else if (timeCount <  1) {

} else if (timeCount <  8950) {
  drawScreen(EVERYOTHER3);
} else if (timeCount <  1) {

} else if (timeCount <  9000) {
  drawScreen(EVERYOTHER2);
} else if (timeCount <  1) {

} else if (timeCount <  9050) {
  drawScreen(EVERYOTHER4);
} else if (timeCount <  1) {


} else if (timeCount <  9000) {
  drawScreen(EVERYOTHER1);
} else if (timeCount <  1) {

} else if (timeCount <  9050) {
  drawScreen(EVERYOTHER3);
} else if (timeCount <  1) {

} else if (timeCount <  9100) {
  drawScreen(EVERYOTHER2);
} else if (timeCount <  1) {

} else if (timeCount <  9150) {
  drawScreen(EVERYOTHER4);
} else if (timeCount <  1) {

} else if (timeCount <  9200) {
  drawScreen(EVERYOTHER1);
} else if (timeCount <  1) {

} else if (timeCount <  9250) {
  drawScreen(EVERYOTHER3);
} else if (timeCount <  1) {

} else if (timeCount <  9300) {
  drawScreen(EVERYOTHER2);
} else if (timeCount <  1) {


                                      // Heartbeat that leads into michael jackson (HEARTBEAT SFX)
} else if (timeCount <  9350) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9400) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9450) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9500) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9550) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9600) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9650) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9700) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9750) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9800) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9850) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {
                                          // Fullscreen intro to (SMOOTH CRIMINAL)
} else if (timeCount <  9900) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  9950) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  10000) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  10050) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  10100) {
  drawScreen(FULLSCREEN1);
} else if (timeCount <  1) {

} else if (timeCount <  10150) {
  drawScreen(FULLSCREEN2);
} else if (timeCount <  1) {

} else if (timeCount <  10200) {
  drawScreen(FULLSCREEN3);
} else if (timeCount <  1) {

} else if (timeCount <  10250) {
  drawScreen(FULLSCREEN4);
} else if (timeCount <  1) {

} else if (timeCount <  10300) {
  drawScreen(FULLSCREEN5);
} else if (timeCount <  1) {

} else if (timeCount <  10350) {
  drawScreen(FULLSCREEN6);
} else if (timeCount <  1) {

} else if (timeCount <  10400) {
  drawScreen(FULLSCREEN7);
} else if (timeCount <  1) {

} else if (timeCount <  10450) {
  drawScreen(FULLSCREEN8);
} else if (timeCount <  1) {
                                    // Change to small circle (SMOOTH CRIMINAL)

} else if (timeCount <  10500) {
  drawScreen(SCIRCLE1);
} else if (timeCount <  1) {

} else if (timeCount <  10550) {
  drawScreen(SCIRCLE2);
} else if (timeCount <  1) {

} else if (timeCount <  10600) {
  drawScreen(SCIRCLE3);
} else if (timeCount <  1) {

} else if (timeCount <  10650) {
  drawScreen(SCIRCLE4);
} else if (timeCount <  1) {

} else if (timeCount <  10700) {
  drawScreen(SCIRCLE5);
} else if (timeCount <  1) {

} else if (timeCount <  10750) {
  drawScreen(SCIRCLE6);
} else if (timeCount <  1) {

} else if (timeCount <  10800) {
  drawScreen(SCIRCLE7);
} else if (timeCount <  1) {

} else if (timeCount <  10850) {
  drawScreen(SCIRCLE8);
} else if (timeCount <  1) {

} else if (timeCount <  10900) {
  drawScreen(SCIRCLE9);
} else if (timeCount <  1) {

} else if (timeCount <  10950) {
  drawScreen(SCIRCLE10);
} else if (timeCount <  1) {

} else if (timeCount <  11000) {
  drawScreen(SCIRCLE11);
} else if (timeCount <  1) {

} else if (timeCount <  11050) {
  drawScreen(SCIRCLE12);
} else if (timeCount <  1) {

} else if (timeCount <  11100) {
  drawScreen(SCIRCLE13);
} else if (timeCount <  1) {

} else if (timeCount <  11150) {
  drawScreen(SCIRCLE14);
} else if (timeCount <  1) {

} else if (timeCount <  11200) {
  drawScreen(SCIRCLE15);
} else if (timeCount <  1) {

} else if (timeCount <  11250) {
  drawScreen(SCIRCLE16);
} else if (timeCount <  1) {

} else if (timeCount <  11300) {
  drawScreen(SCIRCLE17);
} else if (timeCount <  1) {

} else if (timeCount <  11350) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                        // Transition into steps (SMOOTH CRIMINAL)


} else if (timeCount <  11400) {
  drawScreen(STEPS1);
} else if (timeCount <  1) {

} else if (timeCount <  11450) {
  drawScreen(STEPS2);
} else if (timeCount <  1) {

} else if (timeCount <  11500) {
  drawScreen(STEPS3);
} else if (timeCount <  1) {

} else if (timeCount <  11550) {
  drawScreen(STEPS4);
} else if (timeCount <  1) {

} else if (timeCount <  11600) {
  drawScreen(STEPS5);
} else if (timeCount <  1) {

} else if (timeCount <  11650) {
  drawScreen(STEPS6);
} else if (timeCount <  1) {

} else if (timeCount <  11700) {
  drawScreen(STEPS7);
} else if (timeCount <  1) {

} else if (timeCount <  11750) {
  drawScreen(STEPS8);
} else if (timeCount <  1) {

} else if (timeCount <  11800) {
  drawScreen(STEPS9);
} else if (timeCount <  1) {

} else if (timeCount <  11850) {
  drawScreen(STEPS10);
} else if (timeCount <  1) {

} else if (timeCount <  11900) {
  drawScreen(STEPS11);
} else if (timeCount <  1) {

} else if (timeCount <  11950) {
  drawScreen(BLANK);
} else if (timeCount <  1) {
                                        // Heartbeat transition into (TECHNOLOGIC)

} else if (timeCount <  12000) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12025) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12050) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12075) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12150) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12225) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12300) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12375) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12450) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12525) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12600) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12675) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12750) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12825) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12900) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  12975) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  13050) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  13125) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {

} else if (timeCount <  13200) {
  drawScreen(LILHEART);
} else if (timeCount <  1) {

} else if (timeCount <  13275) {
  drawScreen(BIGHEART);
} else if (timeCount <  1) {
                                                // Draw pixels randomly (TECHNOLOGIC)

} else if (timeCount <  13300) {
  drawScreen(BLANK);
} else if (timeCount <  1) {

} else if (timeCount <  13350) {
  drawScreen(SCATTER1);
} else if (timeCount <  1) {

} else if (timeCount <  13400) {
  drawScreen(SCATTER2);
} else if (timeCount <  1) {

} else if (timeCount <  13450) {
  drawScreen(SCATTER3);
} else if (timeCount <  1) {

} else if (timeCount <  13500) {
  drawScreen(SCATTER4);
} else if (timeCount <  1) {


} else if (timeCount <  13550) {
  drawScreen(SCATTER5);
} else if (timeCount <  1) {

} else if (timeCount <  13600) {
  drawScreen(SCATTER6);
} else if (timeCount <  1) {

} else if (timeCount <  13650) {
  drawScreen(SCATTER7);
} else if (timeCount <  1) {

} else if (timeCount <  13700) {
  drawScreen(SCATTER8);
} else if (timeCount <  1) {


} else if (timeCount <  13750) {
  drawScreen(SCATTER9);
} else if (timeCount <  1) {

} else if (timeCount <  13800) {
  drawScreen(SCATTER10);
} else if (timeCount <  1) {

} else if (timeCount <  13850) {
  drawScreen(SCATTER11);
} else if (timeCount <  1) {

} else if (timeCount <  13900) {
  drawScreen(SCATTER12);
} else if (timeCount <  1) {


} else if (timeCount <  13950) {
  drawScreen(SCATTER13);
} else if (timeCount <  1) {

} else if (timeCount <  14000) {
  drawScreen(SCATTER14);
} else if (timeCount <  1) {

} else if (timeCount <  14050) {
  drawScreen(SCATTER15);
} else if (timeCount <  1) {

} else if (timeCount <  14100) {
  drawScreen(SCATTER16);
} else if (timeCount <  1) {


} else if (timeCount <  14150) {
  drawScreen(SCATTER17);
} else if (timeCount <  1) {

} else if (timeCount <  14200) {
  drawScreen(SCATTER18);
} else if (timeCount <  1) {

} else if (timeCount <  14250) {
  drawScreen(SCATTER19);
} else if (timeCount <  1) {

} else if (timeCount <  14300) {
  drawScreen(SCATTER20);
} else if (timeCount <  1) {


} else if (timeCount <  14325) {
  drawScreen(SCATTER21);
} else if (timeCount <  1) {

} else if (timeCount <  14350) {
  drawScreen(SCATTER22);
} else if (timeCount <  1) {

} else if (timeCount <  14375) {
  drawScreen(SCATTER23);
} else if (timeCount <  1) {

} else if (timeCount <  14400) {
  drawScreen(SCATTER24);
} else if (timeCount <  1) {


} else if (timeCount <  14450) {
  drawScreen(SCATTER25);
} else if (timeCount <  1) {

} else if (timeCount <  14500) {
  drawScreen(SCATTER26);
} else if (timeCount <  1) {

} else if (timeCount <  14550) {
  drawScreen(SCATTER27);
} else if (timeCount <  1) {

} else if (timeCount <  14600) {
  drawScreen(SCATTER28);
} else if (timeCount <  1) {


} else if (timeCount <  14650) {
  drawScreen(SCATTER29);
} else if (timeCount <  1) {

} else if (timeCount <  14700) {
  drawScreen(SCATTER30);
} else if (timeCount <  1) {

} else if (timeCount <  14750) {
  drawScreen(SCATTER31);
} else if (timeCount <  1) {

} else if (timeCount <  14800) {
  drawScreen(SCATTER32);
} else if (timeCount <  1) {


} else if (timeCount <  14825) {
  drawScreen(SCATTER33);
} else if (timeCount <  1) {

} else if (timeCount <  14850) {
  drawScreen(SCATTER34);
} else if (timeCount <  1) {

} else if (timeCount <  14875) {
  drawScreen(SCATTER35);
} else if (timeCount <  1) {

} else if (timeCount <  14900) {
  drawScreen(SCATTER36);
} else if (timeCount <  1) {


} else if (timeCount <  14925) {
  drawScreen(SCATTER37);
} else if (timeCount <  1) {
                                          // Fill transition into CHORUS (TECHNOLOGIC)

} else if (timeCount <  15102) {
  drawScreen(FILL1);
} else if (timeCount <  1) {

} else if (timeCount <  15104) {
  drawScreen(FILL2);
} else if (timeCount <  1) {

} else if (timeCount <  15106) {
  drawScreen(FILL3);
} else if (timeCount <  1) {

} else if (timeCount <  15108) {
  drawScreen(FILL4);
} else if (timeCount <  1) {

} else if (timeCount <  15110) {
  drawScreen(FILL5);
} else if (timeCount <  1) {

} else if (timeCount <  15112) {
  drawScreen(FILL6);
} else if (timeCount <  1) {

} else if (timeCount <  15114) {
  drawScreen(FILL7);
} else if (timeCount <  1) {

} else if (timeCount <  15120) {
  drawScreen(FILL8);
} else if (timeCount <  1) {


} else if (timeCount <  15122) {
  drawScreen(FILL9);
} else if (timeCount <  1) {

} else if (timeCount <  15124) {
  drawScreen(FILL10);
} else if (timeCount <  1) {

} else if (timeCount <  15126) {
  drawScreen(FILL11);
} else if (timeCount <  1) {

} else if (timeCount <  15128) {
  drawScreen(FILL12);
} else if (timeCount <  1) {

} else if (timeCount <  15130) {
  drawScreen(FILL13);
} else if (timeCount <  1) {

} else if (timeCount <  15132) {
  drawScreen(FILL14);
} else if (timeCount <  1) {

} else if (timeCount <  15134) {
  drawScreen(FILL15);
} else if (timeCount <  1) {

} else if (timeCount <  15140) {
  drawScreen(FILL16);
} else if (timeCount <  1) {


} else if (timeCount <  15142) {
  drawScreen(FILL17);
} else if (timeCount <  1) {

} else if (timeCount <  15144) {
  drawScreen(FILL18);
} else if (timeCount <  1) {

} else if (timeCount <  15146) {
  drawScreen(FILL19);
} else if (timeCount <  1) {

} else if (timeCount <  15148) {
  drawScreen(FILL20);
} else if (timeCount <  1) {

} else if (timeCount <  15150) {
  drawScreen(FILL21);
} else if (timeCount <  1) {

} else if (timeCount <  15152) {
  drawScreen(FILL22);
} else if (timeCount <  1) {

} else if (timeCount <  15154) {
  drawScreen(FILL23);
} else if (timeCount <  1) {

} else if (timeCount <  15160) {
  drawScreen(FILL24);
} else if (timeCount <  1) {


} else if (timeCount <  15162) {
  drawScreen(FILL25);
} else if (timeCount <  1) {

} else if (timeCount <  15164) {
  drawScreen(FILL26);
} else if (timeCount <  1) {

} else if (timeCount <  15166) {
  drawScreen(FILL27);
} else if (timeCount <  1) {

} else if (timeCount <  15168) {
  drawScreen(FILL28);
} else if (timeCount <  1) {

} else if (timeCount <  15170) {
  drawScreen(FILL29);
} else if (timeCount <  1) {

} else if (timeCount <  15172) {
  drawScreen(FILL30);
} else if (timeCount <  1) {

} else if (timeCount <  15174) {
  drawScreen(FILL31);
} else if (timeCount <  1) {

} else if (timeCount <  15200) {
  drawScreen(FILL32);
} else if (timeCount <  1) {

                                            // HALF OF FILL SCREEN

} else if (timeCount <  15202) {
  drawScreen(FILL33);
} else if (timeCount <  1) {

} else if (timeCount <  15204) {
  drawScreen(FILL34);
} else if (timeCount <  1) {

} else if (timeCount <  15206) {
  drawScreen(FILL35);
} else if (timeCount <  1) {

} else if (timeCount <  15208) {
  drawScreen(FILL36);
} else if (timeCount <  1) {

} else if (timeCount <  15210) {
  drawScreen(FILL37);
} else if (timeCount <  1) {

} else if (timeCount <  15212) {
  drawScreen(FILL38);
} else if (timeCount <  1) {

} else if (timeCount <  15214) {
  drawScreen(FILL39);
} else if (timeCount <  1) {

} else if (timeCount <  15220) {
  drawScreen(FILL40);
} else if (timeCount <  1) {


} else if (timeCount <  15222) {
  drawScreen(FILL41);
} else if (timeCount <  1) {

} else if (timeCount <  15224) {
  drawScreen(FILL42);
} else if (timeCount <  1) {

} else if (timeCount <  15226) {
  drawScreen(FILL43);
} else if (timeCount <  1) {

} else if (timeCount <  15228) {
  drawScreen(FILL44);
} else if (timeCount <  1) {

} else if (timeCount <  15230) {
  drawScreen(FILL45);
} else if (timeCount <  1) {

} else if (timeCount <  15232) {
  drawScreen(FILL46);
} else if (timeCount <  1) {

} else if (timeCount <  15234) {
  drawScreen(FILL47);
} else if (timeCount <  1) {

} else if (timeCount <  15240) {
  drawScreen(FILL48);
} else if (timeCount <  1) {


} else if (timeCount <  15242) {
  drawScreen(FILL49);
} else if (timeCount <  1) {

} else if (timeCount <  15244) {
  drawScreen(FILL50);
} else if (timeCount <  1) {

} else if (timeCount <  15246) {
  drawScreen(FILL51);
} else if (timeCount <  1) {

} else if (timeCount <  15248) {
  drawScreen(FILL52);
} else if (timeCount <  1) {

} else if (timeCount <  15250) {
  drawScreen(FILL53);
} else if (timeCount <  1) {

} else if (timeCount <  15252) {
  drawScreen(FILL54);
} else if (timeCount <  1) {

} else if (timeCount <  15254) {
  drawScreen(FILL55);
} else if (timeCount <  1) {

} else if (timeCount <  15260) {
  drawScreen(FILL56);
} else if (timeCount <  1) {


} else if (timeCount <  15262) {
  drawScreen(FILL57);
} else if (timeCount <  1) {

} else if (timeCount <  15264) {
  drawScreen(FILL58);
} else if (timeCount <  1) {

} else if (timeCount <  15266) {
  drawScreen(FILL59);
} else if (timeCount <  1) {

} else if (timeCount <  15268) {
  drawScreen(FILL60);
} else if (timeCount <  1) {

} else if (timeCount <  15270) {
  drawScreen(FILL61);
} else if (timeCount <  1) {

} else if (timeCount <  15272) {
  drawScreen(FILL62);
} else if (timeCount <  1) {

} else if (timeCount <  15274) {
  drawScreen(FILL63);
} else if (timeCount <  1) {

} else if (timeCount <  15280) {
  drawScreen(FILL64);
} else if (timeCount <  1) {

                                    // 2ND fill for (TECHNOLOGIC)
} else if (timeCount <  15282) {
  drawScreen(FILL1);
} else if (timeCount <  1) {

} else if (timeCount <  15284) {
  drawScreen(FILL2);
} else if (timeCount <  1) {

} else if (timeCount <  15286) {
  drawScreen(FILL3);
} else if (timeCount <  1) {

} else if (timeCount <  15288) {
  drawScreen(FILL4);
} else if (timeCount <  1) {

} else if (timeCount <  15290) {
  drawScreen(FILL5);
} else if (timeCount <  1) {

} else if (timeCount <  15292) {
  drawScreen(FILL6);
} else if (timeCount <  1) {

} else if (timeCount <  15294) {
  drawScreen(FILL7);
} else if (timeCount <  1) {

} else if (timeCount <  15300) {
  drawScreen(FILL8);
} else if (timeCount <  1) {


} else if (timeCount <  15302) {
  drawScreen(FILL9);
} else if (timeCount <  1) {

} else if (timeCount <  15304) {
  drawScreen(FILL10);
} else if (timeCount <  1) {

} else if (timeCount <  15306) {
  drawScreen(FILL11);
} else if (timeCount <  1) {

} else if (timeCount <  15308) {
  drawScreen(FILL12);
} else if (timeCount <  1) {

} else if (timeCount <  15310) {
  drawScreen(FILL13);
} else if (timeCount <  1) {

} else if (timeCount <  15312) {
  drawScreen(FILL14);
} else if (timeCount <  1) {

} else if (timeCount <  15314) {
  drawScreen(FILL15);
} else if (timeCount <  1) {

} else if (timeCount <  15320) {
  drawScreen(FILL16);
} else if (timeCount <  1) {


} else if (timeCount <  15322) {
  drawScreen(FILL17);
} else if (timeCount <  1) {

} else if (timeCount <  15324) {
  drawScreen(FILL18);
} else if (timeCount <  1) {

} else if (timeCount <  15326) {
  drawScreen(FILL19);
} else if (timeCount <  1) {

} else if (timeCount <  15328) {
  drawScreen(FILL20);
} else if (timeCount <  1) {

} else if (timeCount <  15330) {
  drawScreen(FILL21);
} else if (timeCount <  1) {

} else if (timeCount <  15332) {
  drawScreen(FILL22);
} else if (timeCount <  1) {

} else if (timeCount <  15334) {
  drawScreen(FILL23);
} else if (timeCount <  1) {

} else if (timeCount <  15340) {
  drawScreen(FILL24);
} else if (timeCount <  1) {


} else if (timeCount <  15342) {
  drawScreen(FILL25);
} else if (timeCount <  1) {

} else if (timeCount <  15344) {
  drawScreen(FILL26);
} else if (timeCount <  1) {

} else if (timeCount <  15346) {
  drawScreen(FILL27);
} else if (timeCount <  1) {

} else if (timeCount <  15348) {
  drawScreen(FILL28);
} else if (timeCount <  1) {

} else if (timeCount <  15350) {
  drawScreen(FILL29);
} else if (timeCount <  1) {

} else if (timeCount <  15352) {
  drawScreen(FILL30);
} else if (timeCount <  1) {

} else if (timeCount <  15354) {
  drawScreen(FILL31);
} else if (timeCount <  1) {

} else if (timeCount <  15380) {
  drawScreen(FILL32);
} else if (timeCount <  1) {

                                            // HALF OF FILL SCREEN

} else if (timeCount <  24300) {
  drawScreen(DTWO);
} else if (timeCount <  1) {

} else {
// back to the start
}
}

 void  drawScreen(byte buffer2[]){ 
   // Turn on each row in series
    for (byte i = 0; i < 8; i++) {
        setColumns(buffer2[i]); // Set columns for this specific row
        digitalWrite(rows[i], LOW);
        delay(1); // Set this to 50 or 100 if you want to see the multiplexing effect!
        digitalWrite(rows[i], HIGH); 
    }
}

void setColumns(byte b) {
    digitalWrite(COL_1, (b >> 0) & 0x01); // Get the 1st bit: 10000000
    digitalWrite(COL_2, (b >> 1) & 0x01); // Get the 2nd bit: 01000000
    digitalWrite(COL_3, (b >> 2) & 0x01); // Get the 3rd bit: 00100000
    digitalWrite(COL_4, (b >> 3) & 0x01); // Get the 4th bit: 00010000
    digitalWrite(COL_5, (b >> 4) & 0x01); // Get the 5th bit: 00001000
    digitalWrite(COL_6, (b >> 5) & 0x01); // Get the 6th bit: 00000100
    digitalWrite(COL_7, (b >> 6) & 0x01); // Get the 7th bit: 00000010
    digitalWrite(COL_8, (b >> 7) & 0x01); // Get the 8th bit: 00000001 
    // If the polarity of your matrix is the opposite of mine
    // remove all the '~' above.
}
